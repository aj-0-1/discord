definitions:
  auth.AuthResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/auth.User'
    type: object
  auth.LoginRequest:
    description: Login request body
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterRequest:
    description: Login with email and password
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  auth.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  chat.Message:
    properties:
      content:
        type: string
      createdAt:
        type: string
      fromId:
        type: string
      id:
        type: string
      toId:
        type: string
      updatedAt:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email, password and username
      parameters:
      - description: Registration credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "409":
          description: User already exists
          schema:
            type: string
      summary: Register new user
      tags:
      - auth
  /chat/messages:
    post:
      consumes:
      - application/json
      description: Send a private message to another user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Message content
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chat.Message'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chat.Message'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Send message
      tags:
      - chat
  /chat/messages/{userID}:
    get:
      consumes:
      - application/json
      description: Get chat messages with another user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID to get messages with
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/chat.Message'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Get messages
      tags:
      - chat
  /chat/ws:
    get:
      consumes:
      - application/json
      description: Connect to WebSocket for real-time messages
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "101":
          description: Switching protocols
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: WebSocket connection
      tags:
      - chat
swagger: "2.0"
